<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data Visualization | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/data-visualization/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2021-02-21T12:51:17+05:30</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2019 : Adding ImageMagick backend, IRuby support and additional functionalities to Rubyplot]]></title>
    <link href="http://sciruby.com/blog/2019/08/29/gsoc-2019-rubyplot/"/>
    <updated>2019-08-29T02:24:00+05:30</updated>
    <id>http://sciruby.com/blog/2019/08/29/gsoc-2019-rubyplot</id>
    <content type="html"><![CDATA[<p><strong>Table of Contents</strong>
* TOC
{:toc}</p>

<h1>Introduction</h1>

<p>With GSoC 2019 coming to an end, this is my final blog which mentions all my work for the project Rubyplot.</p>

<h1>What is Rubyplot?</h1>

<p>RubyPlot is a plotting library in Ruby for scientific development inspired by the library Matplotlib for Python. Users can create various types of plots like scatter plot, bar plot, etc. and can also create subplots which combine various of these plots. The long-term goal of the library is to build an efficient, scalable and user-friendly library with a backend-agnostic frontend to support various backends so that the library can be used on any device.</p>

<h2>Examples</h2>

<p>Creating graphs in Rubyplot is very simple and can be done in just a few lines of code, for example:
```ruby
require 'rubyplot'</p>

<p>figure = Rubyplot::Figure.new(width: 30, height: 30)</p>

<p>axes00 = figure.add_subplot! 0,0
axes00.plot! do |p|
  d = (0..360).step(5).to_a
  p.data d, d.map { |a| Math.sin(a * Math::PI / 180) }
  p.fmt = 'ok-'
  p.marker_fill_color = :white
  p.marker_size = 0.5
  p.line_width = 2
  p.label = "sine"
end</p>

<p>axes00.title = "A plot function example"
axes00.square_axes = false</p>

<p>figure.write('example1.png')
```
Has the output:<br/>
<img src="https://raw.githubusercontent.com/alishdipani/alishdipani.github.io/master/_posts/Resources/Wrapping_up_GSoC_2019/example1.png" alt="Example1" /></p>

<p>```ruby
require 'rubyplot'</p>

<p>figure = Rubyplot::Figure.new(width: 30, height: 30)</p>

<p>axes00 = figure.add_subplot! 0,0
axes00.candle_stick! do |p|
  p.lows = [0, 10, 20, 30, 20, 10]
  p.highs = [40, 50, 60, 70, 60, 50]
  p.opens = [10, 20, 30, 40, 30, 20]
  p.closes = [30, 40, 50, 60, 50, 40]
  p.color = :yellow
end
axes00.candle_stick! do |p|
  p.lows = [5, 5, 25, 30, 10, 10]
  p.highs = [50, 40, 65, 70, 80, 60]
  p.opens = [10, 20, 30, 40, 30, 20]
  p.closes = [35, 35, 45, 60, 75, 50]
  p.color = :blue
end</p>

<p>axes00.title = "A multi candle-stick plot"
axes00.square_axes = false</p>

<p>figure.write('example2.png')
```
Has the output:<br/>
<img src="https://raw.githubusercontent.com/alishdipani/alishdipani.github.io/master/_posts/Resources/Wrapping_up_GSoC_2019/example2.png" alt="Example2" /></p>

<p>```ruby
require 'rubyplot'</p>

<p>figure = Rubyplot::Figure.new(width: 30, height: 30)</p>

<p>axes00 = figure.add_subplot! 0,0
axes00.bar! do |p|
  p.data [1, 2, 3, 4, 5]
  p.color = :lemon
  p.spacing_ratio = 0.2
end
axes00.bar! do |p|
  p.data [5, 4, 3, 2, 1]
  p.color = :blue
end
axes00.bar! do |p|
  p.data [3, 5, 7, 5, 3]
  p.color = :red
end</p>

<p>axes00.title = "A multi bar plot"
axes00.square_axes = false</p>

<p>figure.write('example3.png')
```
Has the output:<br/>
<img src="https://raw.githubusercontent.com/alishdipani/alishdipani.github.io/master/_posts/Resources/Wrapping_up_GSoC_2019/example3.png" alt="Example3" /></p>

<h1>History of Rubyplot</h1>

<p>Rubyplot started as two GSoC 2018 projects by Pranav Garg<a href="https://github.com/pgtgrly">(@pgtgrly)</a> and Arafat Dad Khan<a href="https://github.com/Arafatk">(@Arafatk)</a> and the mentors from The Ruby Science Foundation<a href="http://sciruby.com/">(SciRuby)</a>, Sameer Deshmukh<a href="https://github.com/v0dro">(@v0dro)</a>, John Woods<a href="https://github.com/mohawkjohn">(@mohawkjohn)</a> and Pjotr Prins<a href="https://github.com/pjotrp">(@pjotrp)</a>. Pranav Garg worked on the GRRuby which had the GR backend and Arafat Dad Khan worked on Ruby Matplotlib which had the ImageMagick backend. The ultimate goal of combining both and creating Rubyplot. After GSoC 2018, Sameer Deshmukh combined both projects and created Rubyplot and he has maintained it ever since. Around May 2019, I started working on Rubyplot as a part of GSoC 2019.</p>

<h1>GSoC 2019</h1>

<p>As a part of GSoC 2019, my project had 3 major deliverables:
1. <strong>ImageMagick support</strong>(Phase 1): Support for ImageMagick back-end will be added in addition to the currently supported back-end GR, the front-end of the library will be back-end agnostic and the current overall integrity of the library will be preserved.<br/>
2. <strong>Plotting and show function</strong>(Phase 2): A new plot function will be added which plots markers (for example circles) to form a scatter plot with the points as inputs (same as plot function in Matplotlib). A new function show will be added which will allow viewing of a plot without saving it. This plot function will be back-end agnostic and hence will support both GR and Magick back-end.<br/>
3. <strong>Integration with iruby notebooks</strong>(Phase 3): Rubyplot will be integrated with iruby notebooks supporting all backends and allowing inline plotting.</p>

<p>As a part of GSoC 2019, I completed all the deliverables I had initially planned along with a tutorial for the library and some other general improvements.<br/>
Details of my work are as follows:</p>

<h2>Phase 1</h2>

<p>During Phase 1, I focused on setting up the ImageMagick backend which involved the basic functionality required for any backend of the library which are X-axis and Y-axis transform functions, <code>within_window</code> function which is responsible for placing the plots in the correct position, function for drawing the X and Y axis, functions for drawing the text and scaling the figure according to the dimensions given by the user. I implemented these functions using internal rmagick functions which were very useful like <code>scale</code>, <code>translate</code>, <code>rotate</code>, etc.<br/>
After this, I worked on the scatter plot, which was the first plot I ever worked on. This plot had a very particular and interesting problem, which was that different types of markers were internally implemented in the GR backend, but for ImageMagick backend, I had to implement everything using basic shapes like circles, lines, polygons and rectangles. To solve this I created a hash of lambdas which had the code to create different types of markers using the basic shapes.<br/>
After this I implemented all the simple plots which Rubyplot supports, these are line plot, area plot, bar plot, histogram, box plot, bubble plot, candle-stick plot and error-bar plot.</p>

<p>So, during Phase 1, I completed the following deliverables -<br/>
1. Set up the ImageMagick backend to have the basic functionality.<br/>
2. Implemented and tested the simple plots in Rubyplot which are scatter plot, line plot, area plot, bar plot, histogram, box plot, bubble plot, candle-stick plot and error-bar plot.</p>

<p>Code for Phase 1 can be found <a href="https://github.com/SciRuby/rubyplot/pull/45/files/01a26777175c83e3e44a33d5ac5d6544b8ff9353..95f24730e04eb13460ed088dcf7569848b66a2ea">here</a>.</p>

<h2>Phase 2</h2>

<p>I started Phase 2 by implementing the multi plots which are multi stack-bar plot, multi-bar plot, multi-box plot and multi candle-stick plot.<br/>
Next, I implemented the <code>plot</code> function which is a combination of scatter plot and line plot, using the plot function the user can easily create a scatter plot or a line plot or a combination of both. The most interesting feature of the <code>plot</code> function is the <code>fmt</code> argument which sets the marker type, line type and the colour of the plot using just characters, so instead of writing the name of the type and setting the variables, the user can simply input a string in <code>fmt</code> argument which has the characters for corresponding marker type, line type and colour.<br/>
Next was to implement the <code>show</code> function which is an alternative to <code>write</code> function. It draws the Figure and shows it on a temporary pop-up window without the need of saving the Figure on the device, this allows the user to test the code quickly and easily. This was done by using internal functions of the backends which are <code>display</code> for ImageMagick and <code>gr_updatews</code> for GR.</p>

<p>So, during Phase 2, I completed the following deliverables -<br/>
1. Implemented and tested the multi plots in Rubyplot which are multi stack-bar plot, multi-bar plot, multi-box plot and multi candle-stick plot.<br/>
2. Implemented and tested the <code>plot</code> function with fmt argument.<br/>
3. Implemented and tested the <code>show</code> function.</p>

<p>Code for Phase 2 can be found <a href="https://github.com/SciRuby/rubyplot/pull/45/files/36497cc3fdb6b9eddaee51777509d1f388a8ba4a..f918e9c9f390cfa96e453f3db610eeaa8f3acbed">here</a> and <a href="https://github.com/SciRuby/rubyplot/pull/52/files/21d2450229ce8508f8a906914fd4bf47e1c62fa3..5947c911d290f34a09effca5ce3e866519b8c5db">here</a>.</p>

<h2>Phase 3</h2>

<p>During Phase 3, I integrated Rubyplot with the IRuby notebooks which allow the user to draw figures inside the notebook just by using the <code>show</code> function, through this integration the user can quickly and easily test the code step by step before running the whole codebase.<br/>
I also implemented ticks for ImageMagick backend.<br/>
Finally, I created a tutorial for the library which also contains template codes for all the plots which a user can easily get familiar with the working of the library and start using it.</p>

<p>So, during Phase 3, I completed the following deliverables -<br/>
1. Integrated Rubyplot with IRuby notebooks with the support for inline plotting.<br/>
2. Implemented and tested ticks for Magick backend.<br/>
3. Created the tutorial for Rubyplot.</p>

<p>Code for Phase 3 can be found <a href="https://github.com/SciRuby/rubyplot/pull/52/files/ca2aa7397581eaf92b64522361e3565f032e6250..3624962d8f96e3611c6bbc55a5c2c8aa1a299e27">here</a>.</p>

<h1>Resources(blogs, code, etc.)</h1>

<h2>Previous Work</h2>

<ul>
<li>GSoC 2018 project GRRuby by Pranav Garg can be found <a href="https://github.com/pgtgrly/GRruby-extension">here</a></li>
<li>GSoC 2018 project Ruby Matplotlib by Arafat Dad Khan can be found <a href="https://github.com/Arafatk/magick-rubyplot">here</a></li>
<li>A talk on Rubyplot by Pranav Garg in RubyConf 2018 can be found <a href="https://youtu.be/7QBkckZ1aNQ">here</a></li>
</ul>


<h2>My work</h2>

<ul>
<li>Daily updates can be found <a href="https://discourse.ruby-data.org/t/gsoc-2019-project-rubyplot-discussion/57">here</a></li>
<li>Proposal can be found <a href="https://github.com/alishdipani/rubyplot/wiki/GSoC-2019-Proposal">here</a></li>
<li>Tutorial notebook can be found <a href="https://github.com/alishdipani/rubyplot/blob/master/tutorial/magick/Rubyplot_Tutorial(Magick">here</a>.ipynb) and can be viewed online(rendered) <a href="https://nbviewer.jupyter.org/github/alishdipani/rubyplot/blob/master/tutorial/magick/Rubyplot_Tutorial%28Magick%29.ipynb">here</a></li>
<li>Rubyplot Github Repository can be found <a href="https://github.com/SciRuby/rubyplot">here</a></li>
<li>All my work can be found in these PRs: <a href="https://github.com/SciRuby/rubyplot/pull/45">PR#45</a> and <a href="https://github.com/SciRuby/rubyplot/pull/52">PR#52</a></li>
<li>Other blogs can be found here:

<ol>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/06/08/GSoC-2019-project-introduction/">GSoC 2019 project introduction</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/06/09/Rubyplot-installation-guide/">Rubyplot installation guide</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/06/10/The-Scatter-plot-example/">The Scatter plot example</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/06/28/Simple-Plots-in-Rubyplot/">Simple Plots in Rubyplot</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/07/13/Multi-plots-in-Rubyplot/">Multi plots in Rubyplot</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/07/26/The-show-and-the-plot-functions/">The show and the plot functions</a></li>
<li><a href="https://alishdipani.github.io/gsoc2019/2019/08/22/IRuby-integration-and-ticks/">IRuby integration and ticks</a></li>
</ol>
</li>
</ul>


<h1>Future Work</h1>

<p>I plan to keep contributing to Rubyplot and also start contributing to other projects of SciRuby.<br/>
Future work to be done for Rubyplot is to write documentation, add more tests, add more types of plots, add more backends, make the plots interactive and in future add the feature for plotting 3-Dimensional graphs which would also be interactive.</p>

<h1>EndNote</h1>

<p>With this, we come to an end of GSoC 2019. These 3 months have been very challenging, interesting, exciting and fun. I got to learn a lot of things while working on Rubyplot and while interacting with my mentors. I have experienced an improvement in my Software development skills and programming in general which will help me a lot in future. I would love to keep working with SciRuby on more such interesting projects and maybe even try for GSoC again next year ;)</p>

<h1>Acknowledgements</h1>

<p>I would like to express my gratitude to my mentor Sameer Deshmukh for his guidance and support. He was always available and had solutions to every problem I faced, I got to learn a lot from him and I hope to learn a lot more from him in the future. I could not have asked for a better mentor.</p>

<p>I would also like to thank Pranav Garg who introduced me to Ruby and also to the SciRuby community. During his GSoC 2018 project, he introduced me to the Rubyplot library and helped me get started with it. His suggestions were very helpful during my GSoC 2019 project.</p>

<p>I would also like to thank mentors from SciRuby Prasun Anand and Shekhar Prasad Rajak for mentoring me and organising the occasional meetings and code reviews. I would also like to thank Udit Gulati for his helpful insights during the code reviews.</p>

<p>I am grateful to Google and the Ruby Science Foundation for this golden opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2018: RubyPlot GR - A Scientific Plotting Library for Ruby Built on GR Framework]]></title>
    <link href="http://sciruby.com/blog/2019/01/23/gsoc-2018-rubyplot+-gr-+a-scientific-plotting-library-for-ruby-built-on-gr/"/>
    <updated>2019-01-23T18:00:00+05:30</updated>
    <id>http://sciruby.com/blog/2019/01/23/gsoc-2018-rubyplot -gr- a-scientific-plotting-library-for-ruby-built-on-gr</id>
    <content type="html"><![CDATA[<h3>1. About</h3>

<p>For my summer of code Project I decided to create a plotting library.</p>

<p>From scratch.</p>

<p>In Ruby.</p>

<h3>2. Application</h3>

<p>The GSoC 2018 application can be found <a href="https://github.com/pgtgrly/Cairo_Graph/wiki/Google-Summer-of-Code-2018-Application">here</a>.</p>

<h3>3. Code</h3>

<p>The code for the project can be found <a href="https://github.com/pgtgrly/GRruby-extension">here</a>.</p>

<p>RubyPlot is currently being developed <a href="https://github.com/SciRuby/rubyplot">here</a>.</p>

<h3>3. The Plotting Architecture</h3>

<p>The plotting architecture for the library was inspired by Late Dr John Hunter's Python Plotting Library "Matplotlib".</p>

<p>The Matplotlib Architecture is be broadly divided into three layers  (as shown in the masterpiece of a figure which I made below). The  Backend, The Artist and the scripting layer.</p>

<p>The Backend layer can further be divided into three parts : The Figure Canvas, The Renderer and the Event.</p>

<p>Matplotlib architecture is mostly written in Python with some of its  backend (the renderer AGG and Figure canvas ) written in C++ ( The  original AGG backend and helper scripts, which is quite tightly bound to  python). But the recently the backends are also written in Python using  the renderers which have Python APIs. The finer details of the Architecture can be found <a href="https://aosabook.org/en/matplotlib.html">here</a>.</p>

<p>In interest of the time I decided to go for a iterative process to develop the Library. I decided to use an existing Artist layer. After a lot of discussion we decided to use GR Framework for the same. The only issue was that GR did not have a Ruby API.</p>

<h3>4. Creating C extensions for GR Framework:</h3>

<p>To create the C extensions I initially decided to use Fiddle followed by FFi. But this lead to certain issues when it came to handling arrays. Hence I decided to go with the old fashioned Ruby C API to create extensions. The code for the same can be found <a href="https://github.com/pgtgrly/GRruby-extension/tree/master/ext/grruby">here</a>.</p>

<h3>5. Creating Scripting Layer</h3>

<p>The Scripting Layer Is meant for high level plotting. The scripting Library created on the GR Framework wrapper has the can plot the following:</p>

<ul>
<li><p>ScatterPlots</p></li>
<li><p>Line graphs</p></li>
<li><p>Bar Plots</p></li>
<li><p>Stacked Bar plot</p></li>
<li><p>Stacked Bar plot (Stacked along z axis)</p></li>
<li><p>Candlestick plots</p>

<p>All the above plots have a lot of customisation options, that can be looked into in the documentation.</p></li>
</ul>


<p>Each Figure can have multiple subplots, each subplot can have multiple plots</p>

<h3>6. Working of the Library</h3>

<p>Here is how the library works.</p>

<p><img src="https://i.imgur.com/sdNg7av.png" alt="Imgur" /></p>

<p>Figure is the class that a user instantiates this is where all the  plotting take place. An instance contains the state of the figure. GR  framework is used as the artist layer which does all the plotting on the  figure. GR is also the backend.</p>

<p>GR artist layer functions are implemented in C language, we wrap the  functions to ruby classes which have the call method which executes the  GR function when the Object of the ruby class is called.
 Each of these ruby classes are called tasks which represents that they  perform a task, for example ClearWorkspace performs the task of cleaning  the workspace.</p>

<p>Now, the figure is divided into subplots. It is Subplot(1,1,1) by  default. So, figure has objects of subplot, each subplot is of type bar  plot or line plot etc. These plots are defined in the Plots module which  is submodule of Scripting module, the Plots module has a submodule  named BasePlots which defines the two bases of plots, LazyBase and  RobustBase.
 Lazy base is for plots which are dependent on state of the figure, for  example a bar graph depends on the location of axes. Every lazy plot has  a unique call function rather than inheriting it from LazyBase. In  LazyPlots the instances of GR Function Classes are called as soon as  they are instantiated. This all is done in the call function.
 Robust base is for plots which are which are independent of the state of  the Figure. For example: A scatter plot is independent of the location  of axes. Plots which are Sub classes of RobustBase append the instances  of GR function classes to tasks when initialized. These instances are  called via the call method defined in RobustBase.</p>

<p>So, each subplot which is of type bar plot or scatter plots etc.  inherits a base. Now, each subplot is just a collection of some tasks,  so it has a task list which stores the tasks to be performed i.e. the  Task objects, for example Scatter plot has tasks SetMarkerColorIndex  which sets the color of the marker, SetMarkerSize which sets the size of  the marker, SetMarkerType which sets the type of the marker and  Polymarker which marks the marker of defined color, size and style.
 Whenever a new Subplot object is initialized, for example  subplot(r,c,i), the figure is divided into a matrix with r rows and c  columns and the subplot initialized with index i is set as the active  subplot ans this active subplot is pushed into the subplot list. Each  subplot object has a unique identity (r,c,i) so if the user wants to  access a subplot which is already declared, this identity will be used.  When the subplot object is called (i.e. to view or save), it first  executes some necessary tasks and then pushes the tasks related to bar  plot, scatter plot, etc. to the task list.</p>

<p>Figure is a collection of such subplots and so Figure has a subplot list which stores the subplot objects.</p>

<p><img src="https://i.imgur.com/H2vEO1i.png" alt="Imgur" /></p>

<p>These tasks are just stored in the lists and are not performed (i.e. called) until the user asks to view or save the figure i.e. when the user calls view or save (which are tasks themselves) the tasks are performed (i.e. called) and the figure is plotted. This is done by using the Module Plotspace.<br/>
When the figure calls the task view or save, these tasks call the Plotspace Object and the state of figure is copied to the Plotspace Object and this Object starts executing( or performing) i.e. calling tasks from task list of each subplot in subplot list and the figure is plotted and viewed or saved.</p>

<p>Here is the current view of Library:</p>

<p><img src="https://i.imgur.com/0HwzAtG.png" alt="imgur" /></p>

<h3>Future</h3>

<p>The Library is currently being developed by SciRuby community <a href="https://github.com/SciRuby/rubyplot">here</a>. Currently, it is a static library, after further development, it's Architecture should look like the following:</p>

<p><img src="https://i.imgur.com/AdfPQlT.png" alt="imgur" /></p>

<h3>Acknowledgements</h3>

<p>I would like to thank Sameer Deshmukh and Prasun Anand for guiding me through every step of software design and helping me out through every decision. I would also like to thank Dr John Woods and Dr Pjotr Prins for their valuable feedback. I am glad to be a part of SciRuby community and I hope to further contribute towards it's goal.</p>

<p>I would also like to thank Arafat Khan, a fellow GSoCer who worked on the library using Rmagick as the backend renderer for our fruitful debates over the architecture of the library</p>

<p>Finally, I would like to thank Google for giving me this opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2018 : Implementing advance features in daru-view]]></title>
    <link href="http://sciruby.com/blog/2019/01/16/gsoc-2018-advance-features-in-daru-view/"/>
    <updated>2019-01-16T17:30:00+05:30</updated>
    <id>http://sciruby.com/blog/2019/01/16/gsoc-2018-advance-features-in-daru-view</id>
    <content type="html"><![CDATA[<p>This is a wrap of my magnificent adventurous journey of GSoC with SciRuby and I feel proud that I managed to contribute a significant amount to the development and progress of the project <a href="https://github.com/SciRuby/daru-view">daru-view</a>. This post summarizes my work in this period.</p>

<p>Daru-view now presents data in some more visualizations like HighMap and HighStock along with the already implemented HighCharts, GoogleCharts, DataTables and Nyaplot. It provides some more new cool features like formatting Daru::View::Table (GoogleCharts table) with different colors, pattern, etc., exporting charts to different formats, comparing different visualizations in a row and many more. Follow up with these <a href="https://github.com/SciRuby/daru-view/tree/master/spec/dummy_iruby">IRuby examples</a> to know the current features equipped in daru-view.</p>

<p><img src="https://camo.githubusercontent.com/a0a98819e3421378873a96893502e044ceb09e84/68747470733a2f2f33327465657468676c69747465722e66696c65732e776f726470726573732e636f6d2f323031382f30352f68732e706e67" title="Fig. 1: HighStock" alt="HighStock" />
<img src="https://camo.githubusercontent.com/7e99eb68f3901995887d93160f2ef26756b531b5/68747470733a2f2f33327465657468676c69747465722e66696c65732e776f726470726573732e636f6d2f323031382f30352f686d5f696e6469612e706e67" title="Fig. 2: HighMap" alt="HighMap" />
<img src="https://camo.githubusercontent.com/f2d3a7dc5889ec63028cc4d4faeb63c47ba5b270/68747470733a2f2f33327465657468676c69747465722e66696c65732e776f726470726573732e636f6d2f323031382f30352f6373732e706e67" title="Fig. 3: CSS styling in HighCharts" alt="CSS styling" />
<img src="https://camo.githubusercontent.com/c6145397f1bf1756bb2f2921ce35ea0d88b51099/68747470733a2f2f33327465657468676c69747465722e66696c65732e776f726470726573732e636f6d2f323031382f30362f696d706f72745f73707265616473686565742e706e67" title="Fig. 4: Importing Data from Google spreadsheet" alt="Data from spreadsheet" />
<img src="https://camo.githubusercontent.com/5c9e5453dcf25cadceca7f558152bb0f75cdc737/68747470733a2f2f33327465657468676c69747465722e66696c65732e776f726470726573732e636f6d2f323031382f30372f6d756c7469706c655f67635f68632e706e67" title="Fig. 5: Comparing data using different visualizations side by side" alt="Multiple visualizations" /></p>

<p>These figures describes the usage of some of the features implemented in daru-view during GSoC.</p>

<h1>Application</h1>

<p>The GSoC 2018 application can be found <a href="https://docs.google.com/document/d/1id7ZJ4_rAEdXjg2yuBfcwSzV2QIiwpsfgc-gZdOioZ4/edit?usp=sharing">here</a>.</p>

<h1>Code</h1>

<ul>
<li>GSoC 2018 work done summary – <a href="https://github.com/SciRuby/daru-view/wiki/GSoC-2018---Progress-Report">Progress Report</a></li>
<li>GSoC 2018 work presentation – <a href="https://docs.google.com/presentation/d/1lhf3QA5SmqA9YbMAjd6JnSJuZBuAfRKFBYs7JPKPRis/edit?usp=sharing">Advance Features in daru-view</a></li>
<li>Discourse Discussion – <a href="https://discourse.ruby-data.org/t/gsoc-2108-project-advance-features-in-daru-view-discussion/43/50">daru-view discussion</a></li>
</ul>


<p>The work done during this GSoC has been explained in the following eight blog posts:</p>

<ol>
<li><a href="https://32teethglitter.wordpress.com/2018/05/01/gsoc-2018-introduction-advance-features-in-daru-view/">GSoC 2018 Introduction – Goals defined</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/05/20/gsoc-2018-coding-week-1/">HighCharts and HighMaps</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/05/27/gsoc-2018-coding-week-2/">Custom Styling CSS in HighCharts</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/06/08/gsoc-2018-coding-week-3-4/">Exporing HighCharts | ChartWrapper | Importing data from google spreadsheet in Google Charts</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/06/24/gsoc-2018-coding-week-5-6/">Exporting Google Charts | Charteditor</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/07/08/gsoc-2018-coding-week-7-8/">Handling events in Google Charts | Multiple Charts in a row</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/07/24/gsoc-2018-coding-week-9-10/">Formatters in Google Charts | Loading large set of data in DataTables</a></li>
<li><a href="https://32teethglitter.wordpress.com/2018/08/06/gsoc-2018-coding-week-11-12/">Reduce a bunch of lines due to JS files in source HTML in rails | Rake task to add new adapter</a></li>
</ol>


<h1>Future Work</h1>

<p>The future work involves removing the dependency of daru-view on gems <code>google_visualr</code> and <code>lazy_high_charts</code> by creating our own gems. Check out these <a href="https://github.com/SciRuby/daru-view/wiki/Ideas#new-ideas-to-be-reviewed">new ideas</a> that can be implemented in daru-view.</p>

<h1>FOSS</h1>

<p>This has been my first attempt to explore the open source community. The summer was filled with the development of open source software and definitely was a great learning experience.</p>

<p>I really appreciate the effort by Google Open Source Committee for conducting GSoC every year. It is the
best platform for the aspiring programmers to improve their skill and give back to society by developing free
and open source software.</p>

<h1>Acknowledgements</h1>

<p>I would like to express my sincere gratitude to Ruby Science Foundation, all the mentors and org admins for providing me this wonderful opportunity to enhance my knowledge and work independently on a project. I especially want to thank Shekhar for guiding me through the journey, helping and motivating me in every possible way.</p>

<p>I am very thankful to Google for organizing such an awesome program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2017 : Data visualization using daru-view]]></title>
    <link href="http://sciruby.com/blog/2017/09/01/gsoc-2017-data-visualization-using-daru-view/"/>
    <updated>2017-09-01T22:46:00+05:30</updated>
    <id>http://sciruby.com/blog/2017/09/01/gsoc-2017-data-visualization-using-daru-view</id>
    <content type="html"><![CDATA[<p>Hello, Rubyist! Are looking for good ruby gem for interactive data
visualization? Then you must try <a href="https://github.com/Shekharrajak/daru-view"><code>daru-view</code></a>, a plugin gem for <a href="https://github.com/SciRuby/daru"><code>daru</code></a>.</p>

<h2>What makes daru-view different ?</h2>

<ul>
<li><p><code>daru-view</code> is designed for interactive plotting of charts and tables.It
provide different plotting tools like Nyaplot, HighCharts, GoogleCharts,
DataTable. So you don't have to write any JavaScript code from these sites
and no need to shift to other language to get charts.</p></li>
<li><p>It can work with <strong>any ruby web application framework like Rails/Sinatra/Nanoc/Hanami</strong>. If you want to try few examples then please look into the
<a href="https://github.com/Shekharrajak/daru-view/tree/master/spec"><code>daru-view/spec/dummy_*</code></a> examples of Rails, Sinatra, Nanoc web applications.</p></li>
<li><p>Now Ruby developers are using IRuby notebook for interactive programming.
<code>daru-view</code> support IRuby notebook as well. So if you just want to see chart
for some DataFrame or Array of data, you can use <code>daru-view</code>.</p></li>
<li><p><code>daru-view</code> can generate chart images to download and save.</p></li>
<li><p><code>daru-view</code> adapters <code>googlecharts</code>, <code>highcharts</code> are able to geneate 3D charts as well.</p></li>
<li><p><code>Table</code> have some main features like pagination, search and many more to be added.It is
designed to load large data set smoothly.</p></li>
</ul>


<h2>Introduction</h2>

<p>Daru is doing pretty good work as the data analysis &amp; manipulation in IRuby notebook as well as backend part of web application. Ruby web application frameworks like Ruby on Rails, Sinatra, Nanoc are popular frameworks. So if Ruby developers get the gem like daru which can do data analysis
and visualization work in applications, then there is no need of shifting to another language or usage of other gem.</p>

<p>My project for <abbr title="Google Summer of Code 2017"> GSoC 2017</abbr> was to "make Daru more ready for integration with modern Web framework" in terms of visualization.</p>

<p>To improve in terms of viewing data,
<a href="https://github.com/Shekharrajak/daru-view">daru-view</a>, a plugin gem for
<a href="https://github.com/SciRuby/daru">daru</a> is created. <a href="https://github.com/Shekharrajak/daru-view">daru-view</a> is for easy and interactive plotting in web application &amp; IRuby notebook. It can work in frameworks like Rails, Sinatra, Nanoc and hopefully in others too.</p>

<p>To see a quick overview of daru-view's features, have a look at these examples:</p>

<ul>
<li><p><a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/tree/master/spec/dummy_iruby/">IRuby Notebook Examples</a></p></li>
<li><p><a href="https://github.com/Shekharrajak/daru_examples_io_view_rails">daru io and daru-view usage in Rails app</a></p></li>
<li><p><a href="https://github.com/Shekharrajak/daru-view/blob/master/README.md">README of daru-view</a></p></li>
</ul>


<h2>Examples</h2>

<p>This is how we can create a Plot class object:</p>

<p>```ruby</p>

<p>Daru::View::Plot.new(data, options)
```</p>

<ul>
<li><p><code>data</code> can be <code>Daru::DataFrame</code>, data array or the format that the adapter support.</p></li>
<li><p><code>options</code> is a hash that contains various options to customize the chart.
If you have chosen a plotting library then you must use the options according
to the options the library providing. Here is the library <code>daru-view</code> uses.
Please check the examples options, they are passing in javascript code:</p>

<ul>
<li><p>GoogleCharts: <a href="https://developers.google.com/chart/interactive/docs/gallery">https://developers.google.com/chart/interactive/docs/gallery</a></p></li>
<li><p>HighCharts: <a href="https://www.highcharts.com/demo">https://www.highcharts.com/demo</a></p></li>
<li><p>Nyaplot: <a href="https://github.com/SciRuby/nyaplot">https://github.com/SciRuby/nyaplot</a> (it works same as <code>daru</code>)</p></li>
</ul>
</li>
</ul>


<p>Note: User must have some knowledge about the plotting tool(that you want to
use) to use it in <code>daru-view</code>. So that you can pass the correct options.</p>

<h3>GoogleCharts:</h3>

<p>Set the plotting library to <code>:googlecharts</code> to use this adapter. This will
load the required js files in your webpage or IRuby notebook.</p>

<p><code>ruby
require 'daru/view'
Daru::View.plotting_library = :googlecharts
</code></p>

<p>Let's create a DataFrame :</p>

<p>```ruby
idx = Daru::Index.new ['Year', 'Sales']
data_rows = [</p>

<pre><code>      ['2004',  1000],
      ['2005',  1170],
      ['2006',  660],
      ['2007',  1030]
</code></pre>

<p>]
df_sale_exp = Daru::DataFrame.rows(data_rows)
df_sale_exp.vectors = idx</p>

<h1>perform data manipulations, if you want.</h1>

<p>```</p>

<p>Now time to plot it:</p>

<p><code>ruby
line_basic_chart = Daru::View::Plot.new(df_sale_exp)
line_basic_chart.chart
</code></p>

<p>This will return the chart object we created using GoogleCharts.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlecharts_line1.png?raw=true 'Basic line chart using GoogleCharts' 'Basic line chart using GoogleCharts' %}</p>

<p>You can find the IRuby notebook example in <a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/blob/master/spec/dummy_iruby/Google%20Chart%20%7C%20%20Line%20Chart.ipynb">this link</a>.</p>

<p>These are various charts type we can use e.g. line, area, bar, bubble,
candlestick, combo, histogram, org, pie, stepped area chart, timeline, treemap,
gauge, column, scatter, etc. We can find the customization options in the
<a href="https://developers.google.com/chart/interactive/docs/gallery">google charts site</a>.</p>

<p>Let me try another chart type Geo :</p>

<p>```ruby
country_population = [</p>

<pre><code>      ['Germany', 200],
      ['United States', 300],
      ['Brazil', 400],
      ['Canada', 500],
      ['France', 600],
      ['RU', 700]
</code></pre>

<p>]</p>

<p>df_cp = Daru::DataFrame.rows(country_population)
df_cp.vectors = Daru::Index.new(['Country', 'Population'])</p>

<p>geochart = Daru::View::Plot.new(</p>

<pre><code>df_cp, type: :geo, adapter: :googlecharts
</code></pre>

<p>)</p>

<p>```</p>

<p>Note: If you have already loaded the dependent JS files for the library then you can use <code>adapter: :googlecharts</code> in your Plot initialization.</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_geo1.png?raw=true 'Basic Geo chart using GoogleCharts' 'Basic Geo chart using GoogleCharts' %}</p>

<h3>HighCharts:</h3>

<p>Set the plotting library to <code>:highcharts</code> to use this adapter. This will
load the required js files in your webpage or IRuby notebook.</p>

<p><code>ruby
require 'daru/view'
Daru::View.plotting_library = :highcharts
</code></p>

<p>Let's pass the <code>data</code> as HighCharts support (we can pass a DataFrame as well):</p>

<p>```
data = [</p>

<pre><code>['Firefox',   45.0],
['IE',       26.8],
{
   :name=&gt; 'Chrome',
   :y=&gt; 12.8,
   :sliced=&gt; true,
   :selected=&gt; true
},
['Safari',    8.5],
['Opera',     6.2],
['Others',   0.7]
</code></pre>

<p>]
plt_pie = Daru::View::Plot.new data, type: :pie
```</p>

<p>This will return the <code>Plot</code> object we created.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/highcharts_pie.png?raw=true 'Basic pie chart using HighCharts' 'Basic pie chart using HighCharts' %}</p>

<p>You can find the IRuby notebook example in <a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/blob/master/spec/dummy_iruby/HighCharts-%20Pie%20charts.ipynb">this link</a>.</p>

<p>There are various charts type we can use e.g. line, area, bar, bubble,
dynamic chart, pie, column, scatter, etc. We can find the customization options in the
<a href="https://www.highcharts.com/demo">HighCharts site</a>.</p>

<h3>Nyaplot</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter</h1>

<p>Daru::View.plotting_library = :nyaplot</p>

<h1>define dataframe</h1>

<p>df = Daru::DataFrame.new({
  a: [1, 2, 4, -2, 5, 23, 0],
  b: [3, 1, 3, -6, 2, 1, 0],
  c: ['I', 'II', 'I', 'III', 'I', 'III', 'II']
  })
df.to_category :c</p>

<h1>creating scatter chart</h1>

<p>scatter_chart = Daru::View::Plot.new(df, type: :scatter, x: :a, y: :b, categorized: {by: :c, method: :color})</p>

<p>```</p>

<p>In IRuby notebook:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/nyaplot_scatter.png?raw=true 'Basic scatter chart using Nyaplot' 'Basic scatter chart using Nyaplot' %}</p>

<h3>GoogleChart data table</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter</h1>

<h1>You don't need this line if you have already using google chart for plotting.</h1>

<h1>It is just for loading the dependent js files.</h1>

<p>Daru::View.table_library = :googlechart</p>

<h1>Lets use array as <code>data</code> (we can pass Daru::DataFrame as well)</h1>

<p>data = [
  ['Galaxy', 'Distance', 'Brightness'],</p>

<pre><code>      ['Canis Major Dwarf', 8000, 230.3],
      ['Sagittarius Dwarf', 24000, 4000.5],
      ['Ursa Major II Dwarf', 30000, 1412.3],
      ['Lg. Magellanic Cloud', 50000, 120.9],
      ['Bootes I', 60000, 1223.1]
</code></pre>

<p>  ]
galaxy_table = Daru::View::Table.new(data)
galaxy_table.table
```</p>

<p>This will return the table object we created using GoogleCharts tool.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_table1.png?raw=true 'Basic table using GoogleCharts' 'Basic table using GoogleCharts' %}</p>

<p>We can create table using Vectors as well.</p>

<p>```ruby
dv = Daru::Vector.new [43934, 52503, 57177, 69658, 97031, 119931, 137133, 154175]</p>

<h1>adding pagination and some customization [optional]</h1>

<p>opts_pagination = {
  width: '100%', height: '100%' ,
  pageSize: 5,
}</p>

<p>table_vec = Daru::View::Table.new(dv, opts_pagination)</p>

<p>```
In Ruby Notebook:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_vec_table1.png?raw=true 'Basic vector table using GoogleCharts' 'Basic vector table using GoogleCharts' %}</p>

<h3>DataTable</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter.</h1>

<p>Daru::View.table_library = :datatables</p>

<h1>Lets use Daru::DataFrame as <code>data</code> (we can pass Array as well)</h1>

<p>df = Daru::DataFrame.new(
  {</p>

<pre><code>b: [11,12,13,14,15],
a: [1,2,3,4,5],
c: [11,22,33,44,55]
</code></pre>

<p>  },</p>

<pre><code>order: [:a, :b, :c],
index: [:one, :two, :three, :four, :five]
</code></pre>

<p>)
df_datatable = Daru::View::Table.new(df, pageLength: 3)
<code>``
Currently there is some problem to diplay it in IRuby notebook, but in web application
you can see something like this using</code>df_datatable.div` :</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/datatables_basic1.png?raw=true 'Basic table using Datatables' 'Basic table using Datatables' %}</p>

<h2>How to use it in Ruby web application</h2>

<p>As we know, we can get the HTML, JS code for the chart from the
<code>Daru::View::Plot</code> or <code>Daru:View::Table</code> object using <code>#div</code> method. So just
need to add that HTML, JS code in webpage in proper place.</p>

<p>There is few things to be noted:</p>

<ol>
<li><p>In layout of the webpage, you have to load all the dependent JS files.
So that HTML, JS code that is genearted work smoothly in that webpage. You
can load the dependent js file for nyaplot library using <code>Daru::View.dependent_script(:nyaplot)</code>, similarly for other library.</p></li>
<li><p>If you are using multiple library in one webpage then load multiple
dependent JS files, in that webpage layout (generally in head tag).</p></li>
</ol>


<p>We can set default adapter using <code>Daru::View.plotting_library = :googlecharts</code>
and also we can change it for particular object while initializing object,
i.e. <code>Daru::View::Plot.new(data, {adapter: :googlecharts})</code>. Just we have
to make sure that dependent JS files are loaded for it.</p>

<p>To make it easy, we have defined <code>daru_chart</code> (that works same as Daru::View::Plot.new) , <code>daru_table</code> (works same as Daru::View::Table.new) for Rails application.</p>

<p>So you can easily use it in controller or view of the application. For reference you can check the <a href="https://github.com/Shekharrajak/daru_examples_io_view_rails">demo Rails app</a>.</p>

<h2>Design of daru-view</h2>

<p><a href="https://github.com/Shekharrajak/daru-view">daru-view</a>, currently using
<a href="https://github.com/SciRuby/nyaplot">Nyaplot</a>, <a href="https://www.highcharts.com/">HighCharts</a>, <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> for plotting the charts. It is also
generating tables using <a href="https://datatables.net/">DataTables</a> and <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> with pagination, search and various features.</p>

<h3>Design Pattern in daru-view</h3>

<p>daru-view mainly uses the <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter design pattern</a> and <a href="https://en.wikipedia.org/wiki/Composite_pattern">composite design pattern</a>.</p>

<ul>
<li><p><strong>Why Adapter design pattern:</strong></p>

<ul>
<li><p>Adapter pattern’s motivation is that we can reuse existing gems if we can modify the interface.</p></li>
<li><p>daru-view joins functionalities of independent or incompatible interfaces of different gems.</p></li>
<li><p><code>daru-view</code> have <a href="https://github.com/Shekharrajak/daru-view/blob/master/lib/daru/view/plot.rb"><code>Plot</code></a> and <a href="https://github.com/Shekharrajak/daru-view/blob/master/lib/daru/view/table.rb"><code>Table</code></a> class, which are using a <a href="https://github.com/Shekharrajak/daru-view/tree/master/lib/daru/view/adapters">adapter</a> when adapter(library to be used for plotting) is set for <code>Plot</code>, <code>Table</code> instance.</p></li>
</ul>
</li>
<li><p><strong>Why Composite design pattern:</strong></p>

<ul>
<li><p>To define common objects and use it for defining composite objects.</p></li>
<li><p>In <code>daru-view</code> we try to write common functions in a module and include it whenever needed.</p></li>
</ul>
</li>
</ul>


<h2>Implementation</h2>

<p>daru-view ensure that it's functions are usable in both IRuby notebook as well
as ruby web application frameworks.</p>

<p>The main thing we need to display something in web application or IRuby
notebook is <code>HTML</code> code of it. daru-view generates the <code>HTML</code> code of the
chart, table and the same can be used to display in web application &amp; IRuby
notebook.</p>

<p>These are the libraries which is used in daru-view currently:</p>

<h3>Nyaplot</h3>

<p><a href="https://github.com/SciRuby/nyaplot">Nyaplot</a> is good library for
visualization in IRuby notebook only. When we use Nyaplot as the adapter in
daru-view, it is usable in both IRuby notebook and web applications. Daru
DataFrame or Vector is used as the data source of the chart. It works
similar to the initial <code>daru</code> plotting system.</p>

<p>If user want to use the Nyaplot methods then it can be done on Nyaplot object.We
can get nyplot object using <code>daru_plot_obj.chart</code>.</p>

<p>i.e.</p>

<p>```ruby
daru_view_obj = Daru::View::Plot.new(</p>

<pre><code>              daru_dataframe, options={adapter: :nyaplot})
</code></pre>

<p>nyaplot_obj = daru_view_obj.chart</p>

<p>```</p>

<p>Now user can operate all the methods for Nyaplot object. Same thing is for
all other adapter in daru-view.</p>

<h3>HighCharts</h3>

<p>To add the <a href="https://www.highcharts.com/">HighCharts</a> features for plotting various chart types, daru-view uses the <a href="https://github.com/michelson/lazy_high_charts">lazy_high_charts</a> gem with additional features.</p>

<p>In this adapter data source can be Array of data, Daru::DataFrame, Daru::Vector or HTML table code of the data.</p>

<p>There are various of options in HighCharts. One can see the options that can
be used in <a href="https://www.highcharts.com/demo">HighCharts demo link</a>, which can
be directly used in daru-view Plot.</p>

<p><strong>HighCharts adaptor can work offline as well in daru-view. Developers can update the saved the JS files (in daru-view) using rake task automatically.</strong></p>

<p>If you is familiar with <code>lazy_high_chart</code> gem and want to use it for
config the chart then user can access the <code>lazy_high_chart</code> object using
<code>Daru::View::Plot#chart</code> and can do necessary operations.</p>

<h3>GoogleCharts</h3>

<p>To add the <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> features for plotting various chart types, daru-view uses the <a href="https://github.com/winston/google_visualr/">google_visualr</a> gem with additional features(in this module more new features are updated).</p>

<p>We want GoogleChart adapter to be very strong since Google chart tools always gets updated and it has amazing plotting features. Similar to the HighCharts module, here also we can use all the options described in Google Charts website.</p>

<p>User can access the <code>google_visualr</code> object using <code>Daru::View::Plot#chart</code>, if
they want to operate <code>google_visualr</code> methods.</p>

<h4>GoogleCharts as data table</h4>

<p>One of the good thing about google chart tool is, it can be used for generating table
for web application and IRuby Notebook with pagination and other features.</p>

<p><strong><code>Daru::View::Plot</code> can take data Array, Daru::DataFrame, Daru::Vector,
Daru::View::Table as data source.</strong></p>

<p><strong><code>Daru::View::Table</code> can take data Array, daru DataFrame, Daru Vector as data
 source.</strong></p>

<h3>DataTables</h3>

<p><a href="https://datatables.net/">DataTables</a> has interaction controls to any HTML table. It can handle large set of data and have many cool features.</p>

<p>To use it, daru-view uses <a href="https://github.com/Shekharrajak/data_tables">https://github.com/Shekharrajak/data_tables</a> gem. [Note: the gem name will be changed in near future]</p>

<p>It basically uses the HTML table code and add features that user want. So internally HTML table code of Daru::DataFrame and Daru::Vector is passed as data source parameter.</p>

<h2>Future Work</h2>

<p>daru-view will be more powerful and simple in near future. Developers can add
more libraries in daru-view easily, if required. To add library follow the setups given in
<a href="https://github.com/Shekharrajak/daru-view/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a></p>

<h2>Conclusion</h2>

<p>The aim of the daru-view is to plot charts in IRuby notebook and ruby web
application easily, so that developers need not have to use any other gem or
language for visualization.</p>

<p>It can work smoothly in Rails/Sinatra/Nanoc web frameworks and I hope it can work in other ruby frameworks as well, because daru-view is generating the html code and javascript code for the chart, which is basic need of the webpage.</p>

<p><strong>Why not use the plotting libraries directly?</strong></p>

<p>If you are using daru gem for analyzing the data and want to visualize it, then it will be good if you have data-visualization within daru and can plot it directly using DataFrame/Vector objects of daru.</p>

<p>daru-view will be helpful in plotting charts and tables directly from the Daru::DataFrame and Daru::Vector . daru-view using nyaplot, highcharts , google charts right now to plot the chart. So user can set the plotting library and get the chart accordingly.</p>

<p>Most of the plotting libraries doesn't provide the features of plotting charts in iruby notebook. They are defined only for web applications (mostly for Rails). But daru-view can plot charts in any ruby web application as well as iruby notebook.</p>

<h2>Acknowledgements</h2>

<p>I would like to thank to my mentors <a href="https://github.com/v0dro">Sameer Deshmukh</a>
,<a href="https://github.com/lokeshh">Lokesh Sharma</a> and <a href="https://github.com/zverok">Victor Shepelev</a> for their response and support and I am very grateful to the <a href="http://sciruby.com/">Ruby Science Foundation</a> for this golden opportunity.</p>

<p>I thank my fellow GSoC participants <a href="https://github.com/athityakumar">Athitya Kumar</a> and <a href="https://github.com/prasunanand">Prasun Anand</a> for their support and discussions on various topics.</p>

<p>Thanks to Google for conducting <a href="https://summerofcode.withgoogle.com">Google Summer of Code</a>.</p>
]]></content>
  </entry>
  
</feed>
